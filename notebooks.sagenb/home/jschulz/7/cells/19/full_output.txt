<div class="docstring">
    
  <p><strong>File:</strong> /usr/local/sage-4.2.1/local/lib/python2.6/site-packages/sage/plot/misc.py</p>
<p><strong>Type:</strong> &lt;type &#8216;function&#8217;&gt;</p>
<p><strong>Definition:</strong> plot(*args, **kwds)</p>
<p><strong>Docstring:</strong></p>
<blockquote>
<p>Use plot by writing</p>
<p><tt class="docutils literal"><span class="pre">plot(X,</span> <span class="pre">...)</span></tt></p>
<p>where <span class="math">X</span> is a Sage object (or list of Sage objects) that
either is callable and returns numbers that can be coerced to
floats, or has a plot method that returns a
<tt class="docutils literal"><span class="pre">GraphicPrimitive</span></tt> object.</p>
<p>There are many other specialized 2D plot commands available
in Sage, such as <tt class="docutils literal"><span class="pre">plot_slope_field</span></tt>, as well as various
graphics primitives like Arrow; type <tt class="docutils literal"><span class="pre">sage.plot.plot?</span></tt> for
a current list.</p>
<p>Type <tt class="docutils literal"><span class="pre">plot.options</span></tt> for a dictionary of the default
options for plots. You can change this to change the defaults for
all future plots. Use <tt class="docutils literal"><span class="pre">plot.reset()</span></tt> to reset to the
default options.</p>
<p>PLOT OPTIONS:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">plot_points</span></tt> - (default: 200) the minimal number of plot points.</li>
<li><tt class="docutils literal"><span class="pre">adaptive_recursion</span></tt> - (default: 5) how many levels of recursion to go
before giving up when doing adaptive refinement.  Setting this to 0
disables adaptive refinement.</li>
<li><tt class="docutils literal"><span class="pre">adaptive_tolerance</span></tt> - (default: 0.01) how large a difference should be
before the adaptive refinement code considers it significant.  See the
documentation further below for more information, starting at &#8220;the
algorithm used to insert&#8221;.</li>
<li><tt class="docutils literal"><span class="pre">xmin</span></tt> - starting x value</li>
<li><tt class="docutils literal"><span class="pre">xmax</span></tt> - ending x value</li>
<li><tt class="docutils literal"><span class="pre">color</span></tt> - an RGB tuple (r,g,b) with each of r,g,b between 0 and 1,
or a color name as a string (e.g., &#8216;purple&#8217;), or an HTML color
such as &#8216;#aaff0b&#8217;.</li>
<li><tt class="docutils literal"><span class="pre">detect_poles</span></tt> - (Default: False) If set to True poles are detected.
If set to &#8220;show&#8221; vertical asymptotes are drawn.</li>
</ul>
<p>APPEARANCE OPTIONS:</p>
<p>The following options affect the appearance of
the line through the points on the graph of <span class="math">X</span> (these are
the same as for the line function):</p>
<p>INPUT:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">alpha</span></tt> - How transparent the line is</li>
<li><tt class="docutils literal"><span class="pre">thickness</span></tt> - How thick the line is</li>
<li><tt class="docutils literal"><span class="pre">rgbcolor</span></tt> - The color as an RGB tuple</li>
<li><tt class="docutils literal"><span class="pre">hue</span></tt> - The color given as a hue</li>
</ul>
<p>Any MATPLOTLIB line option may also be passed in.  E.g.,</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">linestyle</span></tt> - The style of the line, which is one of
&#8216;&#8211;&#8217; (dashed), &#8216;-.&#8217; (dash dot), &#8216;-&#8216; (solid),
&#8216;steps&#8217;, &#8216;:&#8217; (dotted)</li>
<li><tt class="docutils literal"><span class="pre">marker</span></tt>  - &#8220;&#8216;0&#8217; (tickleft), &#8216;1&#8217; (tickright), &#8216;2&#8217; (tickup), &#8216;3&#8217; (tickdown),
&#8216;&#8217; (nothing), &#8216; &#8216; (nothing), &#8216;+&#8217; (plus), &#8216;,&#8217; (pixel), &#8216;.&#8217; (point),
&#8216;1&#8217; (tri_down), &#8216;3&#8217; (tri_left), &#8216;2&#8217; (tri_up), &#8216;4&#8217; (tri_right),
&#8216;&lt;&#8217; (triangle_left), &#8216;&gt;&#8217; (triangle_right), &#8216;None&#8217; (nothing),
&#8216;D&#8217; (diamond), &#8216;H&#8217; (hexagon2), &#8216;_&#8217; (hline), &#8216;^&#8217; (triangle_up),
&#8216;d&#8217; (thin_diamond), &#8216;h&#8217; (hexagon1), &#8216;o&#8217; (circle), &#8216;p&#8217; (pentagon),
&#8216;s&#8217; (square), &#8216;v&#8217; (triangle_down), &#8216;x&#8217; (x), &#8216;|&#8217; (vline)&#8221;</li>
<li><tt class="docutils literal"><span class="pre">markersize</span></tt> - the size of the marker in points</li>
<li><tt class="docutils literal"><span class="pre">markeredgecolor</span></tt> - the markerfacecolor can be any color arg</li>
<li><tt class="docutils literal"><span class="pre">markeredgewidth</span></tt> - the size of the marker edge in points</li>
</ul>
<p>FILLING OPTIONS:
INPUT:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">fill</span></tt> - (Default: None) One of:<ul>
<li>&#8220;axis&#8221; or True: Fill the area between the function and the x-axis.</li>
<li>&#8220;min&#8221;: Fill the area between the function and its minimal value.</li>
<li>&#8220;max&#8221;: Fill the area between the function and its maximal value.</li>
<li>a number c: Fill the area between the function and the horizontal line y = c.</li>
<li>a function g: Fill the area between the function that is plotted and g.</li>
<li>a dictionary d (only if a list of functions are plotted):
The keys of the dictionary should be integers.
The value of d[i] specifies the fill options for the i-th function in the list.
If d[i] == [j]: Fill the area between the i-th and the j-th function in the list.
(But if d[i] == j: Fill the area between the i-th function in the list and the
horizontal line y = j.)</li>
</ul>
</li>
<li><tt class="docutils literal"><span class="pre">fillcolor</span></tt> - (default: &#8216;automatic&#8217;) The color of the fill.
Either &#8216;automatic&#8217; or a color.</li>
<li><tt class="docutils literal"><span class="pre">fillalpha</span></tt> - (default: 0.5) How transparent the fill is.
A number between 0 and 1.</li>
</ul>
<p>Note that this function does NOT simply sample equally spaced
points between xmin and xmax. Instead it computes equally spaced
points and add small perturbations to them. This reduces the
possibility of, e.g., sampling sin only at multiples of
<span class="math">2\pi</span>, which would yield a very misleading graph.</p>
<p>EXAMPLES: We plot the sin function:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">P</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">,</span> <span class="p">(</span><span class="mf">0</span><span class="p">,</span><span class="mf">10</span><span class="p">));</span> <span class="k">print</span> <span class="n">P</span>
<span class="go">Graphics object consisting of 1 graphics primitive</span>
<span class="gp">sage: </span><span class="nb">len</span><span class="p">(</span><span class="n">P</span><span class="p">)</span>     <span class="c"># number of graphics primitives</span>
<span class="go">1</span>
<span class="gp">sage: </span><span class="nb">len</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mf">0</span><span class="p">])</span>  <span class="c"># how many points were computed (random)</span>
<span class="go">225</span>
<span class="gp">sage: </span><span class="n">P</span>          <span class="c"># render</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">P</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">,</span> <span class="p">(</span><span class="mf">0</span><span class="p">,</span><span class="mf">10</span><span class="p">),</span> <span class="n">plot_points</span><span class="o">=</span><span class="mf">10</span><span class="p">);</span> <span class="k">print</span> <span class="n">P</span>
<span class="go">Graphics object consisting of 1 graphics primitive</span>
<span class="gp">sage: </span><span class="nb">len</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mf">0</span><span class="p">])</span>  <span class="c"># random output</span>
<span class="go">32</span>
<span class="gp">sage: </span><span class="n">P</span>          <span class="c"># render</span>
</pre></div>
</div>
<p>We plot with <tt class="docutils literal"><span class="pre">randomize=False</span></tt>, which makes the initial sample points
evenly spaced (hence always the same). Adaptive plotting might
insert other points, however, unless <tt class="docutils literal"><span class="pre">adaptive_recursion=0</span></tt>.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p</span><span class="o">=</span><span class="n">plot</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mf">0</span><span class="p">,</span><span class="mf">3</span><span class="p">),</span> <span class="n">plot_points</span><span class="o">=</span><span class="mf">4</span><span class="p">,</span> <span class="n">randomize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">adaptive_recursion</span><span class="o">=</span><span class="mf">0</span><span class="p">)</span>
<span class="gp">sage: </span><span class="nb">list</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mf">0</span><span class="p">])</span>
<span class="go">[(0.0, 1.0), (1.0, 1.0), (2.0, 1.0), (3.0, 1.0)]</span>
</pre></div>
</div>
<p>Some colored functions:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;purple&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;#ff00ff&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>We plot several functions together by passing a list of functions
as input:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">sin</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">1.</span><span class="o">.</span><span class="mf">4</span><span class="p">]],</span> <span class="p">(</span><span class="mf">0</span><span class="p">,</span> <span class="n">pi</span><span class="p">))</span>
</pre></div>
</div>
<p>The function <span class="math">\sin(1/x)</span> wiggles wildly near <span class="math">0</span>.
Sage adapts to this and plots extra points near the origin.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">1</span><span class="p">,</span> <span class="mf">1</span><span class="p">))</span>
</pre></div>
</div>
<p>Via the matplotlib library, Sage makes it easy to tell whether
a graph is on both sides of both axes, as the axes only cross
if the origin is actually part of the viewing area:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="mf">0</span><span class="p">,</span><span class="mf">2</span><span class="p">))</span>  <span class="c"># this one has the origin</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="mf">1</span><span class="p">,</span><span class="mf">2</span><span class="p">))</span>  <span class="c"># this one does not</span>
</pre></div>
</div>
<p>Another thing to be aware of with axis labeling is that when
the labels have quite different orders of magnitude or are very
large, scientific notation (the <span class="math">e</span> notation for powers of ten) is used:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="mf">480</span><span class="p">,</span><span class="mf">500</span><span class="p">))</span>  <span class="c"># this one has no scientific notation</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="mf">300</span><span class="p">,</span><span class="mf">500</span><span class="p">))</span>  <span class="c"># this one has scientific notation on y-axis</span>
</pre></div>
</div>
<p>Note that the independent variable may be omitted if there is no
ambiguity:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span> <span class="mf">1</span><span class="p">))</span>
</pre></div>
</div>
<p>The algorithm used to insert extra points is actually pretty
simple. On the picture drawn by the lines below:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">))</span> <span class="o">+</span> <span class="n">line</span><span class="p">([(</span><span class="mf">0</span><span class="p">,</span><span class="mf">0</span><span class="p">),</span> <span class="p">(</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;green&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">line</span><span class="p">([(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="o">^</span><span class="mf">2</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;purple&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">point</span><span class="p">(((</span><span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="o">^</span><span class="mf">2</span><span class="p">),</span> <span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">1</span><span class="p">)),</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">pointsize</span><span class="o">=</span><span class="mf">20</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">text</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">text</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mf">1.01</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">text</span><span class="p">(</span><span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mf">0.48</span><span class="p">,</span> <span class="mf">0.57</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">+=</span> <span class="n">text</span><span class="p">(</span><span class="s">&#39;D&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mf">0.53</span><span class="p">,</span> <span class="mf">0.18</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">axes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">xmin</span><span class="o">=-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">xmax</span><span class="o">=</span><span class="mf">1.4</span><span class="p">,</span> <span class="n">ymin</span><span class="o">=</span><span class="mf">0</span><span class="p">,</span> <span class="n">ymax</span><span class="o">=</span><span class="mf">2</span><span class="p">)</span>
</pre></div>
</div>
<p>You have the function (in blue) and its approximation (in green)
passing through the points A and B. The algorithm finds the
midpoint C of AB and computes the distance between C and D. If that
distance exceeds the <tt class="docutils literal"><span class="pre">adaptive_tolerance</span></tt> threshold (<em>relative</em> to
the size of the initial plot subintervals), the point D is
added to the curve.  If D is added to the curve, then the
algorithm is applied recursively to the points A and D, and D and
B. It is repeated <tt class="docutils literal"><span class="pre">adaptive_recursion</span></tt> times (5, by default).</p>
<p>The actual sample points are slightly randomized, so the above
plots may look slightly different each time you draw them.</p>
<p>We draw the graph of an elliptic curve as the union of graphs of 2
functions.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="k">def</span> <span class="nf">h1</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span>  <span class="o">-</span> <span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="k">def</span> <span class="nf">h2</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="o">-</span><span class="nb">abs</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span>  <span class="o">-</span> <span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="n">P</span> <span class="o">=</span> <span class="n">plot</span><span class="p">([</span><span class="n">h1</span><span class="p">,</span> <span class="n">h2</span><span class="p">],</span> <span class="mf">1</span><span class="p">,</span><span class="mf">4</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">P</span>          <span class="c"># show the result</span>
</pre></div>
</div>
<p>We can also directly plot the elliptic curve:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">([</span><span class="mf">0</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">])</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">E</span><span class="p">,</span> <span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">4</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="n">hue</span><span class="p">(</span><span class="mf">0.6</span><span class="p">))</span>
</pre></div>
</div>
<p>We can change the line style to one of <tt class="docutils literal"><span class="pre">'--'</span></tt> (two hyphens, yielding
dashed), <tt class="docutils literal"><span class="pre">'-.'</span></tt> (dash dot), <tt class="docutils literal"><span class="pre">'-'</span></tt> (solid), <tt class="docutils literal"><span class="pre">'steps'</span></tt>, <tt class="docutils literal"><span class="pre">':'</span></tt> (dotted):</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">&#39;-.&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Sage currently ignores points that cannot be evaluated</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">set_verbose</span><span class="p">(</span><span class="o">-</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="o">*</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mf">0</span><span class="p">,</span><span class="mf">1</span><span class="p">))</span>  <span class="c"># this works fine since the failed endpoint is just skipped.</span>
<span class="gp">sage: </span><span class="n">set_verbose</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>
</pre></div>
</div>
<p>This prints out a warning and plots where it can (we turn off the
warning by setting the verbose mode temporarily to -1.)</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">set_verbose</span><span class="p">(</span><span class="o">-</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="p">(</span><span class="mf">1</span><span class="o">/</span><span class="mf">3</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="n">set_verbose</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>
</pre></div>
</div>
<p>To plot the negative real cube root, use something like the following:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">RR</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">nth_root</span><span class="p">(</span><span class="mf">3</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span> <span class="mf">1</span><span class="p">))</span>
</pre></div>
</div>
<p>We can detect the poles of a function:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">),</span> <span class="n">detect_poles</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">ymin</span> <span class="o">=</span> <span class="o">-</span><span class="mf">5</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="mf">5</span><span class="p">)</span>
</pre></div>
</div>
<p>We draw the Gamma-Function with its poles highlighted:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">),</span> <span class="n">detect_poles</span> <span class="o">=</span> <span class="s">&#39;show&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">ymin</span> <span class="o">=</span> <span class="o">-</span><span class="mf">5</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="mf">5</span><span class="p">)</span>
</pre></div>
</div>
<p>The basic options for filling a plot:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p1</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="o">-</span><span class="n">pi</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="s">&#39;axis&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p2</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="o">-</span><span class="n">pi</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="s">&#39;min&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p3</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="o">-</span><span class="n">pi</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="s">&#39;max&#39;</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p4</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="o">-</span><span class="n">pi</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">graphics_array</span><span class="p">([[</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">],</span> <span class="p">[</span><span class="n">p3</span><span class="p">,</span> <span class="n">p4</span><span class="p">]])</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">frame</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="mf">2</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="mf">4</span><span class="o">*</span><span class="n">x</span><span class="p">)],</span> <span class="o">-</span><span class="n">pi</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0</span><span class="p">:</span> <span class="mf">1</span><span class="p">},</span> <span class="n">fillcolor</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">fillalpha</span> <span class="o">=</span> <span class="mf">1</span><span class="p">)</span>
</pre></div>
</div>
<p>A example about the growth of prime numbers:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="mf">1.13</span><span class="o">*</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">100</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">nth_prime</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="n">floor</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">fillcolor</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Fill the area between a function and its asymptote:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="mf">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span><span class="o">+</span><span class="mf">2</span><span class="o">*</span><span class="n">x</span><span class="o">-</span><span class="mf">1</span><span class="p">)</span><span class="o">/</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="mf">2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">f</span><span class="p">,</span> <span class="mf">2</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="mf">2</span><span class="p">],</span> <span class="o">-</span><span class="mf">7</span><span class="p">,</span><span class="mf">7</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0</span><span class="p">:</span> <span class="p">[</span><span class="mf">1</span><span class="p">]},</span> <span class="n">fillcolor</span><span class="o">=</span><span class="s">&#39;#ccc&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">ymin</span><span class="o">=-</span><span class="mf">20</span><span class="p">,</span> <span class="n">ymax</span><span class="o">=</span><span class="mf">20</span><span class="p">)</span>
</pre></div>
</div>
<p>Fill the area between a list of functions and the x-axis:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">bessel_J</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">b</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">1.</span><span class="o">.</span><span class="mf">5</span><span class="p">]],</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">20</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="s">&#39;axis&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that to fill between the ith and jth functions, you
must use dictionary key-value pairs i:[j]; key-value pairs
like i:j will fill between the ith function and the line y=j:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">bessel_J</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">b</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">1.</span><span class="o">.</span><span class="mf">5</span><span class="p">]],</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">40</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="n">i</span><span class="p">,</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">0.</span><span class="o">.</span><span class="mf">3</span><span class="p">]]))</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">([</span><span class="n">b</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">1.</span><span class="o">.</span><span class="mf">5</span><span class="p">]],</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">40</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">0.</span><span class="o">.</span><span class="mf">3</span><span class="p">]]))</span>
</pre></div>
</div>
<p>Extra options will get passed on to show(), as long as they are valid:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">3</span><span class="p">),</span> <span class="n">axes_labels</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;$x$&#39;</span><span class="p">,</span><span class="s">&#39;$y$&#39;</span><span class="p">])</span> <span class="c"># These labels will be nicely typeset</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">3</span><span class="p">),</span> <span class="n">axes_labels</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">])</span> <span class="c"># These will not</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">3</span><span class="p">),</span> <span class="n">figsize</span><span class="o">=</span><span class="p">[</span><span class="mf">8</span><span class="p">,</span><span class="mf">2</span><span class="p">])</span>
<span class="gp">sage: </span><span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">3</span><span class="p">,</span> <span class="mf">3</span><span class="p">))</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">[</span><span class="mf">8</span><span class="p">,</span><span class="mf">2</span><span class="p">])</span> <span class="c"># These are equivalent</span>
</pre></div>
</div>
<p>TESTS:</p>
<p>We do not randomize the endpoints:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="n">p</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span><span class="o">.</span><span class="n">xdata</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mf">1</span>
<span class="go">True</span>
<span class="gp">sage: </span><span class="n">p</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span><span class="o">.</span><span class="n">xdata</span><span class="p">[</span><span class="o">-</span><span class="mf">1</span><span class="p">]</span> <span class="o">==</span> <span class="mf">1</span>
<span class="go">True</span>
</pre></div>
</div>
<p>We check to make sure that the x/y min/max data get set correctly
when there are multiple functions.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">d</span> <span class="o">=</span> <span class="n">plot</span><span class="p">([</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)],</span> <span class="mf">100</span><span class="p">,</span> <span class="mf">120</span><span class="p">)</span><span class="o">.</span><span class="n">get_minmax_data</span><span class="p">()</span>
<span class="gp">sage: </span><span class="n">d</span><span class="p">[</span><span class="s">&#39;xmin&#39;</span><span class="p">]</span>
<span class="go">100.0</span>
<span class="gp">sage: </span><span class="n">d</span><span class="p">[</span><span class="s">&#39;xmax&#39;</span><span class="p">]</span>
<span class="go">120.0</span>
</pre></div>
</div>
<p>We check various combinations of tuples and functions, ending with
tests that lambda functions work properly with explicit variable
declaration, without a tuple.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">))</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,</span><span class="n">xmin</span><span class="o">=-</span><span class="mf">1</span><span class="p">,</span><span class="n">xmax</span><span class="o">=</span><span class="mf">2</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">^</span><span class="mf">2</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mf">3</span><span class="p">)</span><span class="o">-.</span><span class="mf">1</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mf">3</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">1</span><span class="p">)</span>
</pre></div>
</div>
<p>We check to handle cases where the function gets evaluated at a
point which causes an &#8216;inf&#8217; or &#8216;-inf&#8217; result to be produced.</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">1</span><span class="p">)</span>
<span class="gp">sage: </span><span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="o">-</span><span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">1</span><span class="p">)</span>
</pre></div>
</div>
<p>Bad options now give better errors:</p>
<div class="highlight-python"><div class="highlight"><pre class="literal-block"><span class="gp">sage: </span><span class="n">P</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">1</span><span class="o">/</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="mf">1</span><span class="p">,</span><span class="mf">3</span><span class="p">),</span> <span class="n">foo</span><span class="o">=</span><span class="mf">10</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">RuntimeError: Error in line(): option &#39;foo&#39; not valid.</span>
</pre></div>
</div>
</blockquote>


</div>
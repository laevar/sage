
####################################################################        
# WARNING -- Do not edit this file!   It is autogenerated each time
# the notebook(...) command is executed.
# See http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html 
#  (Serving WSGI Applications) for the basic ideas of the below code
####################################################################
from twisted.internet import reactor

# Now set things up and start the notebook
import sagenb.notebook.notebook
sagenb.notebook.notebook.JSMATH=True
import sagenb.notebook.notebook as notebook
import sagenb.notebook.worksheet as worksheet

import sagenb.notebook.misc as misc

misc.DIR = '/home/schulz/teaching/sage' #We should really get rid of this!

import signal, sys, random
def save_notebook(notebook):
    from twisted.internet.error import ReactorNotRunning
    print "Quitting all running worksheets..."
    notebook.quit()
    print "Saving notebook..."
    notebook.save()
    print "Notebook cleanly saved."
    
def my_sigint(x, n):
    try:
        reactor.stop()
    except ReactorNotRunning:
        pass
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    
    
signal.signal(signal.SIGINT, my_sigint)

from twisted.web import server

#########
# Flask #
#########
import os
flask_dir = os.path.join(os.environ['SAGE_ROOT'], 'devel', 'sagenb', 'flask_version')
sys.path.append(flask_dir)
import base as flask_base
startup_token = '{0:x}'.format(random.randint(0, 2**128))
flask_app = flask_base.create_app("/home/schulz/teaching/sage/notebooks.sagenb",interface="localhost",port=8000,secure=True, startup_token=startup_token)
sys.path.remove(flask_dir)

from twisted.web.wsgi import WSGIResource
resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

class QuietSite(server.Site):
    def log(*args, **kwargs):
        "Override the logging so that requests are not logged"
        pass


site = QuietSite(resource)
from twisted.application import service, strports
application = service.Application("Sage Notebook")
s = strports.service('ssl:8000:interface=localhost:privateKey=/home/schulz/.sage/notebook/private.pem:certKey=/home/schulz/.sage/notebook/public.pem', site)

s.setServiceParent(application)

#This has to be done after flask_base.create_app is run
from functools import partial
reactor.addSystemEventTrigger('before', 'shutdown', partial(save_notebook, flask_base.notebook))
